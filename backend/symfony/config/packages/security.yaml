security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        in_memory:
            memory:
                users:
                    api_doc_user:
                        password: '%env(API_DOC_PASSWORD)%'
                        roles: [ 'ROLE_API_DOC' ]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Firewall pro Swagger UI (HTML dokumentaci)
        api_doc:
            pattern: ^/doc
            custom_authenticators:
                - App\Security\DocAuthenticator
            provider: in_memory
            stateless: true
            security: true

        # Firewall pro Swagger JSON (JSON specifikaci dokumentace)
        api_doc_json:
            pattern: ^/doc.json
            custom_authenticators:
                - App\Security\DocAuthenticator
            provider: in_memory
            stateless: true
            security: true

        main:
            lazy: true
            provider: users_in_memory
            stateless: true

    # Pravidla pro přístup k dokumentaci
    access_control:
        - { path: ^/doc, roles: ROLE_API_DOC }
        - { path: ^/doc.json, roles: ROLE_API_DOC }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
