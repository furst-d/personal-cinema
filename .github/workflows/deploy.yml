name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Replace environment variables in .env file
        run: |
          cp backend/.env.example backend/.env
          cp backend/symfony/.env.example backend/symfony/.env
          cp frontend/.env.example frontend/.env
          cp admin-frontend/.env.example admin-frontend/.env
          cp cdn-backend/.env.example cdn-backend/.env
          sed -i 's|db_name|${{ secrets.POSTGRES_DB }}|' backend/.env
          sed -i 's|db_user|${{ secrets.POSTGRES_USER }}|' backend/.env
          sed -i 's|db_password|${{ secrets.POSTGRES_PASSWORD }}|' backend/.env
          sed -i 's|app_secret|${{ secrets.APP_SECRET }}|' backend/symfony/.env
          sed -i 's|jwt_passphrase|${{ secrets.JWT_PASSPHRASE }}|' backend/symfony/.env
          sed -i 's|mailersend_api_key|${{ secrets.MAILERSEND_API_KEY }}|' backend/symfony/.env
          sed -i 's|cdn_project_id|${{ secrets.CDN_PROJECT_ID }}|' backend/symfony/.env
          sed -i 's|cdn_api_key|${{ secrets.CDN_API_KEY }}|' backend/symfony/.env
          sed -i 's|cdn_callback_key|${{ secrets.CDN_CALLBACK_KEY }}|' backend/symfony/.env
          sed -i 's|cdn_url|${{ secrets.CDN_URL }}|' backend/symfony/.env
          sed -i 's|backend_url|${{ secrets.BACKEND_URL }}|' backend/symfony/.env
          sed -i 's|stripe_secret_key|${{ secrets.STRIPE_SECRET_KEY }}|' backend/symfony/.env
          sed -i 's|api_url|${{ secrets.API_URL }}|' frontend/.env
          sed -i 's|cdn_url|${{ secrets.CDN_URL }}|' frontend/.env
          sed -i 's|stripe_public_key|${{ secrets.STRIPE_PUBLIC_KEY }}|' frontend/.env
          sed -i 's|api_url|${{ secrets.API_URL }}|' admin-frontend/.env
          sed -i 's|db_name|${{ secrets.POSTGRES_CDN_DB }}|' cdn-backend/.env
          sed -i 's|db_user|${{ secrets.POSTGRES_CDN_USER }}|' cdn-backend/.env
          sed -i 's|db_password|${{ secrets.POSTGRES_CDN_PASSWORD }}|' cdn-backend/.env
          sed -i 's|minio_endpoint|${{ secrets.MINIO_ENDPOINT }}|' cdn-backend/.env
          sed -i 's|minio_port|${{ secrets.MINIO_PORT }}|' cdn-backend/.env
          sed -i 's|minio_use_ssl|${{ secrets.MINIO_USE_SSL }}|' cdn-backend/.env
          sed -i 's|minio_root_user|${{ secrets.MINIO_ROOT_USER }}|' cdn-backend/.env
          sed -i 's|minio_root_password|${{ secrets.MINIO_ROOT_PASSWORD }}|' cdn-backend/.env
          sed -i 's|redis_password|${{ secrets.REDIS_PASSWORD }}|' cdn-backend/.env

      - name: List files before uploading artifacts
        run: |
          ls -la backend/
          cat backend/.env
          ls -la backend/symfony/
          cat backend/symfony/.env
          ls -la frontend/
          cat frontend/.env
          ls -la admin-frontend/
          cat admin-frontend/.env
          ls -la cdn-backend/
          cat cdn-backend/.env

      - name: Create JWT key files
        run: |
          mkdir -p backend/symfony/config/jwt
          echo "${{ secrets.JWT_PRIVATE_KEY }}" > backend/symfony/config/jwt/private.pem
          echo "${{ secrets.JWT_PUBLIC_KEY }}" > backend/symfony/config/jwt/public.pem

      - name: Upload .env files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: env-files
          path: |
            backend/.env
            backend/symfony/.env
            frontend/.env
            admin-frontend/.env
            cdn-backend/.env
            backend/symfony/config/jwt/private.pem
            backend/symfony/config/jwt/public.pem

  build:
    runs-on: ubuntu-latest
    needs: prepare

    env:
      DOCKER_IMAGE_PREFIX: "furstd/personal-cinema"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download .env files artifact
        uses: actions/download-artifact@v4
        with:
          name: env-files

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push CDN backend Docker images
        run: |
          docker build -f ./cdn-backend/Dockerfile.prod -t ${{ env.DOCKER_IMAGE_PREFIX }}_backend_cdn:latest ./cdn-backend
          docker push ${{ env.DOCKER_IMAGE_PREFIX }}_backend_cdn:latest    

      - name: Build and push backend Docker images
        run: |
          docker build ./backend -t ${{ env.DOCKER_IMAGE_PREFIX }}_backend:latest 
          docker push ${{ env.DOCKER_IMAGE_PREFIX }}_backend:latest
          docker build -f ./backend/nginx/Dockerfile -t ${{ env.DOCKER_IMAGE_PREFIX }}_nginx:latest ./backend
          docker push ${{ env.DOCKER_IMAGE_PREFIX }}_nginx:latest

      - name: Build and push frontend Docker images
        run: |
          docker build -f ./frontend/Dockerfile.prod -t ${{ env.DOCKER_IMAGE_PREFIX }}_frontend:latest ./frontend
          docker push ${{ env.DOCKER_IMAGE_PREFIX }}_frontend:latest

      - name: Build and push admin frontend Docker images
        run: |
          docker build -f ./admin-frontend/Dockerfile.prod -t ${{ env.DOCKER_IMAGE_PREFIX }}_frontend_admin:latest ./admin-frontend
          docker push ${{ env.DOCKER_IMAGE_PREFIX }}_frontend_admin:latest

      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            backend/.env
            backend/symfony/.env
            frontend/.env
            admin-frontend/.env
            cdn-backend/.env
            backend/symfony/config/jwt/private.pem
            backend/symfony/config/jwt/public.pem

  tests:
    runs-on: ubuntu-latest
    needs: build

    env:
      DOCKER_IMAGE_PREFIX: "furstd/personal-cinema"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker images artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Run backend tests
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE_PREFIX }}_backend:latest vendor/bin/phpunit --configuration phpunit.xml

  deploy:
    runs-on: ubuntu-latest
    needs: tests

    env:
      PROJECT_PATH: '/opt/soukromekino'
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download .env files artifact
        uses: actions/download-artifact@v4
        with:
          name: env-files

      - name: Create necessary directories on VPS
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          mkdir -p ~/.ssh
          ssh-keyscan $VPS_HOST >> ~/.ssh/known_hosts
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'mkdir -p ${{ env.PROJECT_PATH }}/backend/symfony ${{ env.PROJECT_PATH }}/frontend ${{ env.PROJECT_PATH }}/admin-frontend ${{ env.PROJECT_PATH }}/cdn-backend'

      - name: Copy files to VPS
        run: |
          scp -i private_key backend/docker-compose.prod.yml $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/backend/
          scp -i private_key frontend/docker-compose.prod.yml $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/frontend/
          scp -i private_key admin-frontend/docker-compose.prod.yml $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/admin-frontend/
          scp -i private_key cdn-backend/docker-compose.prod.yml $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/cdn-backend/
          scp -i private_key traefik/docker-compose.yml $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/traefik/
          scp -i private_key traefik/traefik.toml $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/traefik/
          scp -i private_key backend/.env $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/backend/.env
          scp -i private_key backend/symfony/.env $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/backend/symfony/.env
          scp -i private_key frontend/.env $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/frontend/.env
          scp -i private_key admin-frontend/.env $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/admin-frontend/.env
          scp -i private_key cdn-backend/.env $VPS_USER@$VPS_HOST:${{ env.PROJECT_PATH }}/cdn-backend/

      - name: Pull services
        run: |
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/backend/docker-compose.prod.yml pull'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/frontend/docker-compose.prod.yml pull'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/admin-frontend/docker-compose.prod.yml pull'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/cdn-backend/docker-compose.prod.yml pull'

      - name: Restart services
        run: |
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/traefik/docker-compose.yml down --remove-orphans'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/backend/docker-compose.prod.yml down --remove-orphans'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/frontend/docker-compose.prod.yml down --remove-orphans'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/admin-frontend/docker-compose.prod.yml down --remove-orphans'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/cdn-backend/docker-compose.prod.yml down --remove-orphans'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/backend/docker-compose.prod.yml up -d'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/frontend/docker-compose.prod.yml up -d'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/admin-frontend/docker-compose.prod.yml up -d'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/cdn-backend/docker-compose.prod.yml up -d'
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/traefik/docker-compose.yml up -d'

      - name: Run database migrations
        run: |
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker-compose -f ${{ env.PROJECT_PATH }}/backend/docker-compose.prod.yml exec -T php-fpm php bin/console doctrine:migrations:migrate --no-interaction'

      - name: Clean up old Docker images
        run: |
          ssh -i private_key -T $VPS_USER@$VPS_HOST 'docker image prune -f'
